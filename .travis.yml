# It's better that these Travis files explicitly specify:
# sudo:false
# which then allows them to be run in a Docker-style container
# but this file currently having to use sudo to get a recent Boost (1.57.0) because
# the whitelisted boost-latest ppa respoistory:
# https://launchpad.net/~boost-latest/+archive/ubuntu/ppa
# currently only offers Boost <= v1.55.0.
# If/when Boost >= v1.57.0 gets added to boost-latest, then
# use that instead of the sudo commands and then uncomment sudo: false
#sudo: false
language: cpp

notifications:
  slack: cathupdate:9wDvWdLmrVhxI4JcsOFlkxir
  email:
    recipients:
      - i.sillitoe@ucl.ac.uk
      - t.lewis@ucl.ac.uk

compiler:
  - clang
  - gcc

env:
 - TOOLS=OFF
 - TOOLS=ASAN    # Address sanitizer
 - TOOLS=MSAN    # Memory sanitizer
 - TOOLS=UBSAN   # Undefined-behaviour sanitizer
# - TOOLS="ANALYZE" # Use scan_build, which builds with Clang's static analyzer

matrix:
# GCC is expected to fail for now because it doesn't successfully link against
# the Boost libraries (it gives messages like:
#     `.text._ZN5boost16exception_detail19error_info_injectorISt13runtime_errorED2Ev'
#     referenced in section
#     `.text._ZN5boost16exception_detail19error_info_injectorISt13runtime_errorED1Ev[_ZN5boost16exception_detail19error_info_injectorISt13runtime_errorED1Ev]'
#     of /usr/lib/gcc/x86_64-linux-gnu/4.9/../../../../lib/libboost_log.a(default_sink.o):
#     defined in discarded section
#     `.text._ZN5boost16exception_detail19error_info_injectorISt13runtime_errorED2Ev[_ZN5boost16exception_detail19error_info_injectorISt13runtime_errorED5Ev]'
#     of /usr/lib/gcc/x86_64-linux-gnu/4.9/../../../../lib/libboost_log.a(default_sink.o)
# )
  allow_failures:
    - compiler: gcc
  exclude:
    - compiler: gcc
      env: TOOLS=ASAN
    - compiler: gcc
      env: TOOLS=MSAN
    - compiler: gcc
      env: TOOLS=UBSAN
#    - compiler: gcc
#      env: TOOLS="ANALYZE"

install:
  - if [ "$CXX"   == "g++"     ]; then export CXX="g++-4.9"     CC="gcc-4.9"   ; fi
  - if [ "$CXX"   == "clang++" ]; then export CXX="clang++-3.6" CC="clang-3.6" ; fi
  - if [ "$TOOLS" == "ASAN"    ]; then export CXX_FLAGS="${CXX_FLAGS} -fsanitize=address -fno-omit-frame-pointer"; fi
  - if [ "$TOOLS" == "MSAN"    ]; then export CXX_FLAGS="${CXX_FLAGS} -fsanitize=memory  -fno-omit-frame-pointer"; fi
  - if [ "$TOOLS" == "UBSAN"   ]; then export CXX_FLAGS="${CXX_FLAGS} -fsanitize=undefined                      "; fi
#  - if [ "$TOOLS" == "ANALYZE" ]; then export WRAPPER="scan_build-3.6 " ; fi else export WRAPPER=" "; fi

addons:
  apt:
    sources:
    - kalakris-cmake
    - llvm-toolchain-precise-3.6
    - ubuntu-toolchain-r-test
    packages:
    - clang-3.6
    - cmake
    - gcc-4.9
    - g++-4.9
    - ninja-build

before_script:
  - sudo add-apt-repository ppa:afrank/boost -y
  - sudo apt-get update -q
  - sudo apt-get install libboost1.57-all libboost1.57-all-dev
  - mkdir release_build && cd release_build
  - cmake -GNinja -DCMAKE_BUILD_TYPE=RELEASE ..
  - cd $TRAVIS_BUILD_DIR

script: ninja -j 2 -k 0 -C release_build && release_build/cath-superpose --version && release_build/build-test --build_info=yes --log_level=message --report_level=short --show_progress=yes
