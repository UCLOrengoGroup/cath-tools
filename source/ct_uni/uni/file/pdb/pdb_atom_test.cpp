/// \file
/// \brief The pdb_atom test suite

/// \copyright
/// CATH Tools - Protein structure comparison tools such as SSAP and SNAP
/// Copyright (C) 2011, Orengo Group, University College London
///
/// This program is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
///
/// This program is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
///
/// You should have received a copy of the GNU General Public License
/// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <boost/test/unit_test.hpp>

#include "common/exception/invalid_argument_exception.hpp"
#include "file/pdb/pdb_atom.hpp"
#include "test/boost_addenda/boost_check_no_throw_diag.hpp"

#include <iostream>

using namespace cath;
using namespace cath::common;
using namespace cath::file;
using namespace std;

namespace cath {
	namespace test {

		/// \brief The pdb_atom_test_suite_fixture to assist in testing pdb_atom
		struct pdb_atom_test_suite_fixture {
		protected:
			~pdb_atom_test_suite_fixture() noexcept = default;

			const string ATOM_RECORD_SIMPLE           = { "ATOM      1  N   LEU A 999       0.041 148.800  54.967  1.00 35.61           N  " };
			const string ATOM_RECORD_SHORT            = { "ATOM      1  N   LEU A 999       0.041 148.800  54.967  1.00 35.61           N"   };
			const string ATOM_RECORD_DNA              = { "ATOM     60  P    DT B 405     -34.489  40.044 103.442  1.00 22.35           P  " };
			const string ATOM_RECORD_NEG_RES_NUM      = { "ATOM   2041  N   ASN B  -1     -27.445  -1.104  16.047  1.00 65.16           N  " };
			const string ATOM_RECORD_RALIGNED_RES_NUM = { "ATOM     89  N   GLU   200     -60.412  54.016  32.157  1.00  0.00           N  " };
			const string ATOM_RECORD_LALIGNED_RES_NUM = { "ATOM    182  N   GLU  200       -0.292   3.837   4.911  1.00226.06           N  " };
			const string ATOM_RECORD_HAS_CHARGE       = { "HETATM 2959 ZN    ZN A1392      19.359  67.577 -13.048  1.00 34.67          ZN2+" };

			/// \brief Return the PDB line string generated by parsing the specified PDB line string
			///        and then writing the results back to a PDB line string
			string parse_and_write_pdb_line(const string &prm_pdb_line ///< The PDB line to parse into objects that should then be written out again to a PDB line
			                                ) {
				const resid_atom_pair parsed_details = parse_pdb_atom_record( prm_pdb_line );
				return to_pdb_file_entry(
					parsed_details.first,
					parsed_details.second
				);
			}

		};

	}  // namespace test
}  // namespace cath

BOOST_FIXTURE_TEST_SUITE(pdb_atom_test_suite, cath::test::pdb_atom_test_suite_fixture)


BOOST_AUTO_TEST_CASE(parse_from_simple_line) {
	const pdb_atom &my_atom = parse_pdb_atom_record( ATOM_RECORD_SIMPLE ).second;

	BOOST_CHECK_EQUAL(   0.041, my_atom.get_coord().get_x() );
	BOOST_CHECK_EQUAL( 148.800, my_atom.get_coord().get_y() );
	BOOST_CHECK_EQUAL(  54.967, my_atom.get_coord().get_z() );
}



BOOST_AUTO_TEST_SUITE(parsing_and_writing_recreates_orig)

BOOST_AUTO_TEST_CASE(parsing_and_writing_simple_recreates_orig) {
	BOOST_CHECK_EQUAL( parse_and_write_pdb_line( ATOM_RECORD_SIMPLE           ), ATOM_RECORD_SIMPLE           );
}

BOOST_AUTO_TEST_CASE(parsing_and_writing_short_recreates_orig) {
	BOOST_CHECK_EQUAL( parse_and_write_pdb_line( ATOM_RECORD_SHORT            ), ATOM_RECORD_SHORT            );
}

BOOST_AUTO_TEST_CASE(parsing_and_writing_with_space_in_aa_recreates_orig) {
	BOOST_CHECK_EQUAL( parse_and_write_pdb_line( ATOM_RECORD_DNA              ), ATOM_RECORD_DNA              );
}

BOOST_AUTO_TEST_CASE(parsing_and_writing_neg_res_num_recreates_orig) {
	BOOST_CHECK_EQUAL( parse_and_write_pdb_line( ATOM_RECORD_NEG_RES_NUM      ), ATOM_RECORD_NEG_RES_NUM      );
}

BOOST_AUTO_TEST_CASE(parsing_and_writing_pdb_line_recreates_orig) {
	BOOST_CHECK_EQUAL( parse_and_write_pdb_line( ATOM_RECORD_RALIGNED_RES_NUM ), ATOM_RECORD_RALIGNED_RES_NUM );
}

BOOST_AUTO_TEST_CASE(parsing_and_writing_with_charge_recreates_orig) {
	BOOST_CHECK_EQUAL( parse_and_write_pdb_line( ATOM_RECORD_HAS_CHARGE       ), ATOM_RECORD_HAS_CHARGE       );
}

BOOST_AUTO_TEST_CASE(prob_3rzl_aa_is_space_DI) {
	const auto eg = "ATOM   1991  P    DI C 279      -3.647  -0.709  25.597  1.00 74.32           P  "s;
	BOOST_CHECK_EQUAL( parse_and_write_pdb_line( eg ), eg );
}

BOOST_AUTO_TEST_CASE(prob_1xnr_aa_is_space_space_I) {
	const auto eg = "ATOM  32465  P     I X  34     204.990 105.714   5.000  1.00103.21           P  "s;
	BOOST_CHECK_EQUAL( parse_and_write_pdb_line( eg ), eg );
}

BOOST_AUTO_TEST_CASE(prob_3dpv_aa_is_space_space_T) {
	const auto eg = "ATOM     14  P     T D   2      27.504 -19.224  78.514  1.00 55.76           P  "s;
	BOOST_CHECK_EQUAL( parse_and_write_pdb_line( eg ), eg );
}

BOOST_AUTO_TEST_CASE(prob_1hp6_aa_is_space_plus_A) {
	const auto eg = "ATOM    231  P    +A A  12      83.066  18.237  30.962  1.00 87.96           P  "s;
	BOOST_CHECK_EQUAL( parse_and_write_pdb_line( eg ), eg );
}

BOOST_AUTO_TEST_CASE(prob_356d_aa_is_space_plus_C) {
	const auto eg = "ATOM     60  P    +C A   4     -13.733  -1.949  43.855  1.00131.77           P  "s;
	BOOST_CHECK_EQUAL( parse_and_write_pdb_line( eg ), eg );
}

BOOST_AUTO_TEST_CASE(prob_1gpg_aa_is_space_plus_G) {
	const auto eg = "ATOM    103  P    +G A   6      19.564  20.304  20.798  1.00 19.23           P  "s;
	BOOST_CHECK_EQUAL( parse_and_write_pdb_line( eg ), eg );
}

BOOST_AUTO_TEST_CASE(prob_1hp6_aa_is_space_plus_U) {
	const auto eg = "ATOM    337  O1P  +U A  17      64.074  32.147  28.234  1.00 80.53           O  "s;
	BOOST_CHECK_EQUAL( parse_and_write_pdb_line( eg ), eg );
}

BOOST_AUTO_TEST_CASE(prob_3zvp_aa_is_space_A_space) {
	const auto eg = "ATOM  24975  O2'  A  A 887      17.091  72.217 152.494  1.00185.33           O  "s;
	BOOST_CHECK_EQUAL( parse_and_write_pdb_line( eg ), eg );
}

BOOST_AUTO_TEST_CASE(prob_3zvp_aa_is_space_C_space) {
	const auto eg = "ATOM  24947  P    C  A 886      20.235  82.538 148.238  1.00201.87           P  "s;
	BOOST_CHECK_EQUAL( parse_and_write_pdb_line( eg ), eg );
}

BOOST_AUTO_TEST_CASE(prob_4a1d_aa_is_space_G_space) {
	const auto eg = "ATOM  44287  O6   G  12241     -68.655-262.663  42.932  1.00 88.05           O  "s;
	BOOST_CHECK_EQUAL( parse_and_write_pdb_line( eg ), eg );
}

BOOST_AUTO_TEST_CASE(prob_4a1d_aa_is_space_U_space) {
	const auto eg = "ATOM  44462  O2   U  12249     -93.007-280.490  66.838  1.00307.96           O  "s;
	BOOST_CHECK_EQUAL( parse_and_write_pdb_line( eg ), eg );
}

// The PDB for 2yjd has been fixed in January 2017; this tests that the code will handle the cases before that
BOOST_AUTO_TEST_CASE(prob_2yjd_old_version_has_aa_ACE) {
	const auto eg = "ATOM   3523  C   ACE C   0       0.643 -30.156  -7.677  1.00 55.57           C  "s;
	BOOST_CHECK_EQUAL( parse_and_write_pdb_line( eg ), eg );
}

// The PDB for 2yjd has been fixed in January 2017; this tests that the code will handle the cases before that
BOOST_AUTO_TEST_CASE(prob_2yjd_old_version_has_aa_NH2) {
	const auto eg = "ATOM   3619  N   NH2 C  12      -3.194 -44.176   7.219  1.00 87.94           N  "s;
	BOOST_CHECK_EQUAL( parse_and_write_pdb_line( eg ), eg );
}

BOOST_AUTO_TEST_SUITE_END()



/// \brief Check that ATOM parsing doesn't permit a right aligned residue number if that's specified
BOOST_AUTO_TEST_CASE(requiring_right_aligned_res_num_throws_if_not_right_aligned) {
	BOOST_CHECK_NO_THROW_DIAG( parse_pdb_atom_record( ATOM_RECORD_RALIGNED_RES_NUM )                             );
	BOOST_CHECK_THROW(         parse_pdb_atom_record( ATOM_RECORD_LALIGNED_RES_NUM ), invalid_argument_exception );
}


BOOST_AUTO_TEST_SUITE_END()

