#!/usr/bin/env perl

use strict;
use warnings;

use Carp             qw/ confess        /;
use Cwd;
use Data::Dumper;
use Digest::MD5      qw/ md5_hex        /;
use English          qw/ -no_match_vars /;
use feature          qw/ say            /;
use File::Which      qw/ which          /;
use IPC::Run3;
use List::MoreUtils  qw/ uniq           /;
use Path::Class      qw/ dir file       /;

my $SSAP_ALIGNMENT_SUFFIX = ".list";
my $SSAP_SCORES_SUFFIX    = ".scores";

warn "\n";
warn "***************************************************************************\n";
warn "* THIS SCRIPT IS DEPRECATED BECAUSE CATH-SUPERPOSE CAN NOW DO THIS ITSELF *\n";
warn "*                  PLEASE STOP USING THIS SCRIPT                          *\n";
warn "*               USE CATH-SUPERPOSE DIRECTLY INSTEAD                       *\n";
warn "***************************************************************************\n";
warn "\n";

# Check the script's arguments
if ( scalar(@ARGV) < 3 ) {
	die "Usage: $PROGRAM_NAME temp_dir struc_id1 struc_id2 struc_id3 ...\n\n"
		. "Align regions may also be specified in the same list in the format: D[5inwB02]251-348:B,408-416A:B\n\n"
		. "Those specifications must be in one-to-one correspondence with the struc_ids.\n"
		. "(Put the specifications in quotes to prevent the square brackets confusing your shell (\"No match\"))\n";
}
my ( $temp_dir_name, @struc_ids ) = @ARGV;
@struc_ids = sort( @struc_ids );

my @choppings = grep { $ARG =~ /^D\[.*\]/ } @struc_ids;
@struc_ids    = grep { $ARG !~ /^D\[.*\]/ } @struc_ids;

if ( scalar( @choppings ) != 0 && scalar( @choppings ) != scalar( @struc_ids ) ) {
	confess 'If specifying domains\' regions, the number specified ('
		. scalar( @choppings )
		. ') must match the number of structures ('
		. scalar( @struc_ids )
		. ")\n ";
}

my @pref_ids = map {
	my $index    = $ARG;
	my $chopping = ( scalar( @choppings ) > 0 ) && $choppings[ $index ];
	( defined( $chopping ) && $chopping =~ /^D\[(.*)\]/ )
		? $1
		: $struc_ids[ $index ];
} ( 0 .. scalar( @struc_ids ) );

# Check the directory exists
my $temp_dir = dir( $temp_dir_name )->absolute();
if ( ! -d $temp_dir ) {
	$temp_dir->mkpath()
		or confess "Directory \"$temp_dir\" doesn't not exist and unable to make it : $OS_ERROR";
}

# Temporarily change to that temporary directory for performing any SSAPs
my $orig_dir = cwd();
chdir $temp_dir
	or confess "Couldn't chdir back to \"$temp_dir\"";

# Loop over the struc pairs
# (only the half matrix is required so only consider pairs where $struc_id1 lt $struc_id2)
my @scores_lines;
foreach my $struc_idx1 ( 0 .. $#struc_ids ) {
	foreach my $struc_idx2 ( 0 .. $#struc_ids ) {
		if ( $struc_idx1 < $struc_idx2 ) {
			my $struc_id1      = $struc_ids[ $struc_idx1 ];
			my $struc_id2      = $struc_ids[ $struc_idx2 ];
			my $chopping_1     = ( scalar( @choppings ) > 0 ? $choppings[ $struc_idx1 ] : undef );
			my $chopping_2     = ( scalar( @choppings ) > 0 ? $choppings[ $struc_idx2 ] : undef );
			my $pref_id1       = $pref_ids[ $struc_idx1 ];
			my $pref_id2       = $pref_ids[ $struc_idx2 ];
			my $alignment_file = $temp_dir->file( $pref_id1 . $pref_id2 . $SSAP_ALIGNMENT_SUFFIX );
			my $scores_file    = $temp_dir->file( $pref_id1 . $pref_id2 . $SSAP_SCORES_SUFFIX    );
			my $struc_label_1  = $struc_id1 . ( $chopping_1 ? " (with $chopping_1)" : '' );
			my $struc_label_2  = $struc_id2 . ( $chopping_2 ? " (with $chopping_2)" : '' );

			# If both files already exist then say so
			if ( -s $alignment_file && -s $scores_file ) {
				warn localtime(time())." : cath-ssap files already exist for $pref_id1 vs $pref_id2\n";
			}
			# Otherwise perform the cath-ssap and write the scores to a file
			else {
				warn localtime(time())." : Performing cath-ssap for $pref_id1 vs $pref_id2\n";
				my $cath_ssap_name = 'cath-ssap';
				my $cath_ssap_exe = which( $cath_ssap_name )
					|| confess "Unable to find SSAP executable \"$cath_ssap_name\" - please sure it is executable and located in one of the directories in your PATH";
				my ($ssap_stdout, $ssap_stderr);
				run3( [
					$cath_ssap_exe,
					$struc_id1,
					$struc_id2,
					( defined( $chopping_1 ) ? ( '--align-regions', $chopping_1 ) : () ),
					( defined( $chopping_2 ) ? ( '--align-regions', $chopping_2 ) : () ),
				], undef, \$ssap_stdout, \$ssap_stderr );

				# TODO: cath-ssap is just being improved now to return a non-zero error code when it fails.
				#       Once that change has propagated out a bit, remove this additional regex check
				#       that's being used to workaround cath-ssap always returning a SUCCESS error code
				if ( $CHILD_ERROR || $ssap_stdout !~ /\s+\d+\s+\d+\s+[\d\.]+\s+/ ) {
					confess "Error when running cath-ssap for $pref_id1 vs $pref_id2 (\n\tstdout: \"$ssap_stdout\";\n\tstderr: \"$ssap_stderr\"\n)";
				}
				$scores_file->spew($ssap_stdout);
			}
			
			# Either way, add the scores line to back of @scores_lines
			push @scores_lines, $scores_file->slurp();
		}
	}
}

# Remove trailing newlines from @scores_lines
while(chomp(@scores_lines)) {}

# Chdir back to the original directory
chdir $orig_dir
	or confess "Couldn't chdir back to \"$orig_dir\"";

# Write all the scores to a single scores file
my $md5_of_ids = md5_hex(join('_', @struc_ids));
my $scores_file = $temp_dir->file( "ssap_scores.$md5_of_ids" );
$scores_file->spew( join( "\n", @scores_lines )."\n" );

# Print some suggestion commands
say '';
say 'Now, try running command like: ';
say '  cath-superpose --ssap-scores-infile ' . $scores_file
	. join( '', map { ' --pdb-infile $PDBDIR/' . $ARG        ; } @struc_ids )
	. join( '', map { ' --align-regions \''    . $ARG . '\'' ; } @choppings )
	. " --sup-to-pymol-file $md5_of_ids.pml";
say "  pymol $md5_of_ids.pml";

