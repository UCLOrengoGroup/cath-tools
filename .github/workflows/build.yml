name: build

# TODO:
#
# * Windows?

on: [push, pull_request]

env:
  BUILD_EXTRA_CATH_TESTS: ON
  BUILD_EXTRA_CATH_TOOLS: ON

jobs:
  build:
    strategy:
      matrix:
        compiler: [ clang ]
        flavour: [ release ]
        os: [ ubuntu-20.04, macos-10.15 ]

        include:
          - compiler: gcc
            flavour: release
            os: ubuntu-20.04

        include:
          - compiler: clang
            flavour: ubasan
            os: ubuntu-20.04

      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    ##################### SETUP #####################

    - name: Prepare CMake repo (Ubuntu 20.04)
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates gnupg software-properties-common wget
        wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
        sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main'

    - name: Setup (Ubuntu 20.04)
      env:
        # Prevents the apt-get installation of the tzdata package hanging on an interactive user prompt
        TZ: UTC
      if: matrix.os == 'ubuntu-20.04'
      run: sudo apt-get update && sudo apt-get install -y cmake git libgsl-dev ninja-build python3-pip

    - name: Setup (Ubuntu 20.04 - Clang)
      if: matrix.os == 'ubuntu-20.04' && matrix.compiler == 'clang'
      run: sudo apt-get update && sudo apt-get install -y clang libc++-dev libc++1 libc++abi-dev

    - name: Setup (Ubuntu 20.04 - GCC)
      if: matrix.os == 'ubuntu-20.04' && matrix.compiler == 'gcc'
      run: sudo apt-get update && sudo apt-get install -y g++-10

    - name: Setup (MacOS 10.15)
      if: matrix.os == 'macos-10.15'
      # Set LIBRARY_PATH as work around for this issue:
      # https://github.com/Homebrew/homebrew-core/issues/67427#issuecomment-756511468
      run: |
        brew update
        brew install boost gsl icu4c ninja
        echo "LIBRARY_PATH=${LIBRARY_PATH}:/usr/local/opt/icu4c/lib" >> $GITHUB_ENV

    - name: Install Conan
      run: sudo /usr/bin/pip3 install --upgrade conan

    ##################### PREPARE FOR BUILD #####################

    - name: Create build directory
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Build Conan dependencies
      run: conan install --build missing --install-folder "$GITHUB_WORKSPACE/build" "$GITHUB_WORKSPACE" --profile "$GITHUB_WORKSPACE/.github/conan-profiles/${{ matrix.os }}.${{ matrix.compiler }}.${{ matrix.flavour }}.conan-profile"
      shell: bash

    - name: Configure CMake
      run: cmake -GNinja -B "$GITHUB_WORKSPACE/build" -S "$GITHUB_WORKSPACE" -D "CMAKE_TOOLCHAIN_FILE:FILEPATH=$GITHUB_WORKSPACE/.github/cmake-toolchain-files/${{ matrix.os }}.${{ matrix.compiler }}.${{ matrix.flavour }}.cmake" -D "CMAKE_MODULE_PATH:PATH=$GITHUB_WORKSPACE/build"
      shell: bash

    ##################### BUILD #####################

    - name: Build
      run: ninja -C "$GITHUB_WORKSPACE/build" -k 0
      shell: bash

    ##################### TEST #####################

    - name: Grab version info from example executable
      run: ${GITHUB_WORKSPACE}/build/bin/cath-superpose --version
      shell: bash

    - name: Test
      run: ctest --output-on-failure
      shell: bash
      working-directory: ${{github.workspace}}/build

    ##################### PUBLISH #####################

    - name: Move executables to add OS suffix to their names
      if: startsWith(github.ref, 'refs/tags/')
      run: find "$GITHUB_WORKSPACE/build/bin" -type f -exec mv {} {}.${{ matrix.os }} \;
      shell: bash

    # Note: this doesn't use a shell so don't use substitution or "
    - name: Publish to release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: startsWith(github.ref, 'refs/tags/') && matrix.flavour == 'release' && ( ( matrix.os == 'macos-10.15' && matrix.compiler == 'clang' ) || ( matrix.os == 'ubuntu-20.04' && matrix.compiler == 'gcc' ) )
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/bin/cath-assign-domains.${{ matrix.os }}
          build/bin/cath-cluster.${{ matrix.os }}
          build/bin/cath-map-clusters.${{ matrix.os }}
          build/bin/cath-refine-align.${{ matrix.os }}
          build/bin/cath-resolve-hits.${{ matrix.os }}
          build/bin/cath-ssap.${{ matrix.os }}
          build/bin/cath-superpose.${{ matrix.os }}
